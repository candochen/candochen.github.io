---
layout: post
title: "Scala 点滴 （1）"
date: 2014-08-31 11:06:48 +0800
comments: true
categories: Scala
---
在Coursera上学习Scala编程有两个月了， Scala的基础课程即将结束。在新的课程《响应式编程》开始之前，我想总结一下。

## 编程范式 ##

如果我们把现在的编程范式做下分类，我们可以分成3类：
   > 1. 指令编程范式
   > 2. 函数编程范式
   > 3. 逻辑编程范式

而以上每种编程范式都与面向对象编程范式正交，意思是说指令型编程语言可以拥有面向对象特征，同理其他两种编程范式都可以拥有面向对象的特征。

所谓指令型编程语言范式是从冯. 诺依曼的计算机模型引申而来的，它的特点正如冯.诺依曼模型一样，运行时通过总线把它把指令和数据从内存加载到CPU，然后把结果又送回去。
更具体地说，指令编程范式对于于冯.诺依曼计算机模型有一种对应关系，
> 1. 变量 相对于 内存单元
> 2. 释放变量  相对于 load 指令
> 3. 变量赋值  相对于 store 指令  
> 4. 分支控制  相对于 jump 指令

在严格定义下，函数式编程范式则有以下特点
>1. 没有变量，也就没有对变量赋值
>2. 没有指令编程范式的控制结构，例如while，loop等等
>3. 函数是函数式编程范式里的头等公民，这意味着函数，就像普通值一样，可以在任何地方定义，包括在其他函数里面；此外，函数也像普通值一样，可以作为参数传到其他函数里，或作为结果返回，当然我们也可以对函数定义一下操作符用于把函数组合起来。

假如我宽泛地给函数式编程范式给个定义，我们可以说，函数式编程范式主要是一种关注函数的编程范式。

至于逻辑编程范式，由于Martin Ordersky并没有给出解释，所以这里也略过。

在市面上的流行语言中，如果根据以上编程范式分类，函数式编程语言看起来应该像这样子

1. 严格定义下的函数式编程语言
    >  Pure Lisp, XSLT, XPath, XQuery, FP
	>  Haskell (without I/O Monad or UnsafePerformIO)

2. 广义定义下的函数式编程语言
    > Lisp, Scheme, Racket, Clojure
    > SML, Ocaml, F#
    > Haskell (full language)
    > Scala
    > Smalltalk, Ruby (!)